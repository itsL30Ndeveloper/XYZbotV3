const {    WAConnection,    MessageType,    Presence,    Mimetype,    GroupSettingChange} = require('@adiwajshing/baileys')const fs = require('fs')const { banner, start, success } = require('./lib/functions')const { color } = require('./lib/color')require('./thisleonreal.js')nocache('./thisleonreal.js', module => console.log(`${module} is now updated!`))const starts = async (xyz = new WAConnection()) => {    xyz.logger.level = 'warn'    xyz.version = [2, 2123, 8]    xyz.browserDescription = [ 'XYZteam', 'Chrome', '3.0' ]    console.log(banner.string)    xyz.on('qr', () => {        console.log(color('[','white'), color('!','red'), color(']','white'), color(' Enjoy & Scan QR '))    })    fs.existsSync('./session.json') && xyz.loadAuthInfo('./session.json')    xyz.on('Memuat koneksi', () => {        start('2', 'Membuat koneksi ...')    })    xyz.on('open', () => {        success('2', 'Terkoneksi')    })    await xyz.connect({timeoutMs: 30*1000})        fs.writeFileSync('./session.json', JSON.stringify(xyz.base64EncodedAuthInfo(), null, '\t'))    xyz.on('chat-update', async (message) => {        require('./thisleonreal.js')(xyz, message)    })}/** * Uncache if there is file change * @param {string} module Module name or path * @param {function} cb <optional>  */function nocache(module, cb = () => { }) {    console.log('Module', `'${module}'`, 'is now being watched for changes')    fs.watchFile(require.resolve(module), async () => {        await uncache(require.resolve(module))        cb(module)    })}/** * Uncache a module * @param {string} module Module name or path */function uncache(module = '.') {    return new Promise((resolve, reject) => {        try {            delete require.cache[require.resolve(module)]            resolve()        } catch (e) {            reject(e)        }    })}starts()